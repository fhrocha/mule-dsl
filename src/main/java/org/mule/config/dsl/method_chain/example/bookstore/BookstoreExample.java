/*
 * $Id: 20811 2011-03-30 16:05:20Z porcelli $
 * --------------------------------------------------------------------------------------
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */
package org.mule.config.dsl.method_chain.example.bookstore;

import org.mule.config.dsl.method_chain.AbstractModule;
import org.mule.config.dsl.method_chain.TempModel.*;
import org.mule.config.dsl.method_chain.example.bookstore.business.*;

public class BookstoreExample {

    public static class BookStore extends AbstractModule {
        @Override
        public void configure() {
            propertyPlaceholder("email.properties");

            //Configure some properties to work with GMail's SMTP
            connector(GMAIL.CONNECTOR, name("emailConnector"));

            //Use this as a poor man's message queue, in the real world we would use JMS
            connector(VM.CONNECTOR, name("vmQueues"));

            //This queue contains a feed of the latest statistics generated by
            // the Data Warehouse (it should really be a LIFO queue)
            endpoint(VM.ENDPOINT, name("stats")).path("statistics");

            TransformerBuilder setHtmlContentType = transformer(MessagePropertiesTransformer.class, name("setHtmlContentType"))
                    .addMessageProperty("Content-Type", "text/html")
                            //Tomcat lowercases headers, need to drop this old one too
                    .deleteMessageProperty("content-type");

            flow(name("CatalogService"))
                    //Public interface
                   .from(HTTP.INBOUND).listen(host("0.0.0.0").port(8777).path("services/catalog"))
                            .using(WS.INBOUND).with(CatalogService.class)
                    //Administration interface
                   .from(uri("servlet://catalog"))
                            .processRequest(
                                    //Convert request parameters to Book object
                                    pipeline().transformWith(HttpRequestToBook.class))
                            .processResponse(
                                    //Format response to be a nice HTML page
                                    pipeline().transformWith(AddBookResponse.class)
                                    //Force text/html, otherwise it falls back to request
                                    // props, which have form-encoded one
                                    .transformWith(setHtmlContentType))
            .execute(CatalogServiceImpl.class).asSingleton();

            flow(name("OrderService"))
                    //Public interface
                    .from(HTTP.INBOUND).listen(host("0.0.0.0").port(8777).path("services/order"))
                            .using(WS.INBOUND).with(OrderService.class)
             .execute(OrderServiceImpl.class).asSingleton()
             .send(VM.OUTBOUND).path("emailNotification")
             .send(VM.OUTBOUND).path("dataWarehouse");


            flow(name("EmailNotificationService"))
                   .from(VM.INBOUND).path("emailNotification")
             .transformWith(OrderToEmailTransformer.class)
             .transformWith(StringToEmailTransformer.class)
             .send(SMTP.OUTBOUND)
                            .secure()
                            .user("${user}")
                            .password("${password}")
                            .host("${host}")
                            .from("${from}")
                            .subject("Your order has been placed!");

            flow(name("DataWarehouse"))
                   .from(VM.INBOUND).path("dataWarehouse")
             .execute(DataWarehouse.class).asSingleton()
             .transformWith(setHtmlContentType)
             .send(ref("stats"));
        }
    }
}