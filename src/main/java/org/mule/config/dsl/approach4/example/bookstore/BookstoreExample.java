/*
 * $Id: 20811 2011-03-30 16:05:20Z porcelli $
 * --------------------------------------------------------------------------------------
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */
package org.mule.config.dsl.approach4.example.bookstore;

import org.mule.config.dsl.approach4.AbstractModule;
import org.mule.config.dsl.approach4.example.bookstore.business.*;

public class BookstoreExample {

    public static class BookStore extends AbstractModule {
        @Override
        public void configure() {
            propertyPlaceholder("email.properties");

//            //Configure some properties to work with GMail's SMTP
//            connector("emailConnector").extend(GMail_Connector.class);

            //Use this as a poor man's message queue, in the real world we would use JMS
            connector(HTTP.CONNECTOR, alias("vmQueues"));

            //This queue contains a feed of the latest statistics generated by
            // the Data Warehouse (it should really be a LIFO queue)
            endpoint(VM.ENDPOINT, alias("stats")).path("statistics");

            Transformer setHtmlContentType = transformer("setHtmlContentType")
                    .extend(MessagePropertiesTransformer.class)
                    .addMessageProperty("Content-Type", "text/html")
                            //Tomcat lowercases headers, need to drop this old one too
                    .deleteMessageProperty("content-type");

            flow("CatalogService").in(
                    //Public interface
                    from(HTTP.INBOUND).listen(host("0.0.0.0").port(8777).path("services/catalog"))
                            .using(WS.INBOUND).with(CatalogService.class),

                    //Administration interface
                    from("servlet://catalog")
                            .processRequest(
                                    //Convert request parameters to Book object
                                    transformWith(HttpRequestToBook.class))
                            .processResponse(
                                    //Format response to be a nice HTML page
                                    transformWith(AddBookResponse.class),
                                    //Force text/html, otherwise it falls back to request
                                    // props, which have form-encoded one
                                    transformWith(setHtmlContentType))
            ).process(
                    execute(CatalogServiceImpl.class).asSingleton()
            );

            flow("OrderService").in(
                    //Public interface
                    from(HTTP.INBOUND).listen(host("0.0.0.0").port(8777).path("services/order"))
                            .using(WS.INBOUND).with(OrderService.class)
            ).process(
                    execute(OrderServiceImpl.class).asSingleton(),
                    send(VM.OUTBOUND).path("emailNotification"),
                    send(VM.OUTBOUND).path("dataWarehouse")
            );


            flow("EmailNotificationService").in(
                    from(VM.INBOUND).path("emailNotification")
            ).process(
                    transformWith(OrderToEmailTransformer.class),
                    transformWith(StringToEmailTransformer.class),
                    send(SMTPS.OUTBOUND)
                            .user("${user}")
                            .password("${password}")
                            .host("${host}")
                            .from("${from}")
                            .subject("Your order has been placed!")
            );

            flow("DataWarehouse").in(
                    from(VM.INBOUND).path("dataWarehouse")
            ).process(
                    execute(DataWarehouse.class).asSingleton(),
                    transformWith(setHtmlContentType),
                    send("stats")
            );
        }
    }
}